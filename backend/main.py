from fastapi import FastAPI
from typing import Optional
import joblib
import numpy as np

# 1. Load the trained machine learning model
# We load the model outside the endpoint to avoid reloading on every request
model = joblib.load('../health_risk_model.joblib')

app = FastAPI()

# The original root endpoint
@app.get("/")
def read_root():
    return {"message": "Hello from Alera! The API is working."}

# The mock risk prediction endpoint
@app.get("/predict_risk/{location}")
def predict_risk(location: str):
    return {
        "location": location,
        "risk_level": "Medium",
        "advisory": f"A medium health risk is detected in {location}. Stay informed and take precautions."
    }

# The new endpoint that uses the AI model for a health score
@app.get("/health_score/")
def get_health_score(pollution_index: Optional[int] = 50,
                     symptom_reports: Optional[int] = 10,
                     pollen_level: Optional[int] = 20):
    """
    Uses a pre-trained AI model to calculate a health risk score.
    """
    # 2. Prepare the input data for the model
    input_data = np.array([[pollution_index, symptom_reports, pollen_level]])

    # 3. Use the model to make a prediction
    predicted_score = model.predict(input_data)[0]

    # 4. Convert the score to a risk level
    risk_level = "Low"
    if predicted_score > 80:
        risk_level = "High"
    elif predicted_score > 50:
        risk_level = "Medium"

    return {
        "score": predicted_score,
        "risk_level": risk_level,
        "advisory": "This score is generated by a core AI model. A more advanced agent would use real-time data from multiple sources to make this prediction."
    }